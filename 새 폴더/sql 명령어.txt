creat
create table student(
studentname varchar2(32) not null unique,
jender varchar2(3),
mathscore number(5),
englescore number(5),
korscore number(5),
checktime TIMESTAMP
);

select
select * from student;

alter
컬럼 추가
alter table 테이블명 add 컬럼명 컬럼타입(길이)
컬럼 삭제
alter table 테이블명 drop column 컬럼명
컬럼명 수정
alter table 테이블명 rename column 기존컬럼명 to 새컬럼명
컬럼타입/길이 수정
alter table 테이블명 modifiy 컬럼명 새타입(새길이)

desc 테이블명;

drop
drop table student;

------------------------------------------------------
insert
insert into student values('Jon cluck','m',0,0,0,sysdate);

update
update student set checktime = sysdate, 컬럼명2=새값2
where studentname='amanda';

delete
delete from student
where jender='m';






rollback; commit-> insert, update delete

/*와일드카드*/
select * from worker where salary <= 2500;    -> 2500이하 찾는법
select * from worker where salary=5000 or emp_name like 'M%'; -> M으로 시작하는사람

create table worker as select * from employees; -> 복사본 생성

savepoint a1;

savepoint a2;

savepoint a3;

rollback to savepoint a2;

select '이름:'||emp_name||',월급:'||salary||'달러' from worker; ->텍스트로 적으며 출력

----의사컬럼------
select s1.currval from dual;  -> 현재 시퀀스 확인
select s1.nextval from dual; -> 하나 추가 시키고 확인
rownum -> 게시물 paging
-------------------
select emp_name from employees
where manager_id in(select employee_id from employees where manager_id=100);

select employee_id,emp_name,salary from employees 
where department_id 
in(select department_id from DEPARTMENTS where department_name='배송부');
-> sql 문안에 서브쿼리


employee_id as "사원아이디"-> as키워드

/*문자형 비교*/
select emp_name, hire_date from employees where hire_date like '00/01%'; 
select emp_name, hire_date from employees where hire_date > '00/01/01' and hire_date <'00/01/31';

/*case when*/
select emp_name,salary,
case when salary<5000 then 'lower salary' 
when salary between 5000 and 10000 then 'middle salary'
when salary<5000 then 'lower salary'
when salary>10000 then 'high salary'
end as grade
from employees;

/*반올림 반내림*/
select ceil(3.14),      ->올림
floor(3.14) from dual;      ->내림
select round(3.54),       -> 반올림
trunc(3.99) from dual;      ->소숫점 다 버림

/*승수*/
select power(5,3) from dual;
/*제곱근*/
select sqrt(16) from dual;
/*나머지*/
select remainder(19,4),mod(19,4) from dual;
mod->n2-n1*round(n2/n1)
remainder->n2-n1*floor(n2/n1)
/*첫문자를 대문자로*/
select initcap('hello world') from dual;
/*모든문자를 소문자로*/
update student set studentname = lower(studentname);
/*연결 연산자*/
||   ==  concat('', '')

/*문자열 자르기*/
select substr('abcdef', 1, 4), substr('abcdefg', -1, 4)

from dual;

-> 문자열이나 컬럼명 -> 시작인덱스(1~),길이
ltrim(문자열/컬럼명,자를문자열) -> 왼쪽에서 잘라라
rtrim
lpad

/*문자열 바꾸기*/
select replace(emp_name,'Donald OConnell','D') from employees where emp_name='Donald OConnell';

/*문자열 잘라서 출력하기*/
select emp_name as "진짜이름" , /*문자열 잘라서 출력하기*/
'['||substr(emp_name,instr(emp_name,' ')+1)||']' as"성", -> 공백까지 포함되니 인덱스1을 더한다. 
'['||substr(emp_name,1,instr(emp_name,' ')-1)||']'as"이름" 
from employees;

/*문자열 잘라서 출력*/
substr(자를 문자열,자를시작번호,끝번호);

/*문자열 확인해서 인덱스 반환/
instr(emp_name,' ') -> emp_name 안에 공백이 몇번째 인덱스에 있는지 확인한다.
instr(확인할 문자열, 있는지 확인할 문자열, 확인할 시작인덱스, 몇번째로 일치하는지);

/*문자열 왼쪽/오른쪽에 채워서 반환하는 함수/
select rpad(substr(emp_name,1,instr(emp_name,' ')-1),8,' ')
lpad(emp_name,채울숫자,채울문자)
rpad(emp_name,채울숫자,채울문자)

/*날짜 함수/
select last_day(sysdate) from dual; -> 이번달의 마지막날
add_months(sysdate,3) from dual; -> 3개월 후의 날
to_char(sysdate,'YYYY/MM/DD HH:MI:SS') -> 연월일 -> 문자로 바꿔서 표시

/*변환 함수/
to_number(바꿀거 컬럼명 or 바꿀문자) -> 숫자로 바꿔서 표시
to_char( ) -> to_char(숫자 혹은 날짜, 바꿀 포맷)
to_date( )

/*null 관련 함수/
nvl(null,1) -> 1  첫번째 값이 널이면 두번쨰 값을 반환
nvl(commission_pct,'0')
nullif(to_char(end_date,'yyyy'),to_char(start_date,'yyyy') -> 두값이 같으면 널을반환

/*기타함수/
greatest(들어오는값) -> 들어 오는 값중 가장 큰 값을 반환;
least(들어오는값) -> 들어오는 값중 가장 작은 값을 반환;
decode(x,y,z ... default)-> xy를 비교해서 같으면 z을 반환 같지 않으면 다음값 아니면 default
decode(channel_id,3,'Direct Sales',
                            9,'Tele Sales',
                                5,'Catalog',
                                4,'Internet',
                                2,'Partners',
        'etc')


/*집합연산자/
합집합
select name from goods where country='한국'
union -----
select name from goods where country='일본'
교집합
select name from goods where country='한국'
intersect-----
select name from goods where country='일본'
차집합
select name from goods where country='한국'
minus-----
select name from goods where country='일본'

/*집계함수/
select count(*) from sales; ->count( ) -> 괄호안에 값을 숫자로 바꾼다.
-> 널은 카운트가 안된다!!!
sum(컬럼명) -> 안에 값을 더한다.
min(컬럼명), max(컬럼명) -> 안에서 값이 큰거 작은거
select max(mathscore),min(mathscore),max(korscore),min(korscore) from student;

*/Groub by/
-> 무조건 셀렉트 명이랑 일치 해야한다!!!!!!!!!!!!!
그룹으로 묶어서 나타낸다 예를 들어 메니저아이디별 메니저 아이디
from 뒤에 group by 묶을거
select manager_id,count(*) from employees group by manager_id;
select gender,sum(mathscore),sum(korscore),sum(englescore) from student group by gender;

*/having
그룹바이에 값을 제한하는 것
그룹바이 뒤에 써야함
having count(*) >1

*/order by/
알파벳 순으로 정렬 select랑 쓸때는 마지막 문자에서만 사용한다.

-----------------------------------조인----------------------------------------
select worker.이름,depart.부서명
from worker a, depart b
where a.부서코드=b.부서코드
-> 조건에서 부서코드가 달라도 쓸수 있다
-> 찾고자 하는게 중요하다.
-> 같은 테이블로 찾을 수 있다.
-> 조건으로 찾는데 셀렉트에 대응되는게 
하나여야 하나가 찾아진다.

select a.테이블에 찾고자 하는거, b.테이블에 찾고자하는거
from 합칠 테이블
where a.에서 가져온것은 = b.이제 부터 b이다. 

*****
from으로 테이블을 가져오고
where로 = 뒤에 테이블을 바꾸고
select로 바뀐 테이블에서 값을 찾는다 -
>바뀐 테이블에서 찾고자 하는것이 동등비교인게 좋다!!!


select b.department_name, a.emp_name, a.employee_id, b.department_name
from departments b, employees a
where a.department_id=b.department_id;

select*from departments;

select a.department_name, a.department_id, c.emp_name, count(*), sum(b.salary) 
from departments a, employees b, employees c
where a.department_id=b.department_id
and a.manager_id=c.employee_id
group by a.department_name, a.department_id, c.emp_name;
 