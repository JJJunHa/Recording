set
get
필드로 바로 값 넣지 말고 메소드로 넣어야 캡슐화를 통한 보안이 된다.

소스->제너레이터 게터 앤드 세터   (자동 게터 세터 생성)
소스->제너레이터 콘스트럭터 (초기화)

생성자(Constructor)
-메소드의 일종
-반환값 타입이 없다
-파라미터(매개변수)는 받을 수 있다
-파라미터가 없는 생성자(기본생성자, default constructor)도 만들 수 있다
-생성자는 여러개 만들 수 있다 단, 파라미터의 갯수나 타입은 각각 달라야 한다.
-> 갯수가 같으면 탑이이 달라야한다, 타입이 같으면 갯수가 달라야한다 
-> 컴퓨터는 둘다 같으면 같은걸로 인식한다. 
-> ex 스트링 하나를 입력했는데 그게 컬러인지 모델인지 컴퓨터는 몰라요

-생성자를 전혀 선언하지 않으면, JVM이 기본생성자를 암시적으로 하나 만든다.
(생성자는 Car 자체를 함수로 사용하는것이다.)

메소드 안에 () 값을 파라미터라함
메소드에 파라미터까지를 페이스라함
메소드 안에 실행문을 바디라함

객체지향 프로그래밍 언어의 특징
캡슐화
상속
다형성 =  Poly(여러개)+mopy(얼굴) -> Overloading(오버로딩)
	생성자 오버로딩(동일이름의 생성자가 각각 다른 
	파라미터 갯수와 타입을 가지고 동일이름의 생성자가 "여러개" 선언될 수있다. 
	
	메소드 오버로딩(동일이름의 생성자가 각각 다른 
	파라미터 갯수와 타입을 가지고 동일이름의 메소드가 "여러개" 선언될 수있다. 

추상화

생성자에서 다른 생성자를 호출하는 문장은 반드시 맨위에 위치해야 한다.
다른 생성자 호출할 때는 this()=(생성된 인스턴스에 이름을 의미한다)을 사용한다.

Stackoverflow.com

메소드/연산자의 오버로딩(다형성)을 사용하려면, 반드시 Parameter(매개변수)
의 타입이나 갯수는 달라야 한다.(반환값타입은 상관없음)

향상된 for문